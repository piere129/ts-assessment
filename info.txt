TODOS:

code beter structureren
annotations doen werken
type returns doen kloppen
builder pattern opzetten om configuration voor inputconversion beter te laten verlopen aka 
'newInputConverter.addEntitySortBy(...).addAnnotationSortBy(...)'
separate files/utils for reusability

recursive example:

  // could also be done recursively by passing convertEntities with a 'parentIds' parameter
  // this parentIds parameter would contain all ids from a higher level, so that the full entities array can be filtered for any item
  // that has an ID in its 'refs' that is also in the 'parentIds', because that means its' parent was added already.
const nest = (items: any[] = [], parentId: any[] = []): any => {
    // Filter items based on parent IDs
    const filtered = items.filter((item: any) => {
        // If no parent IDs provided, filter top-level items
        if (parentId.length === 0) {
            return !item.parent_ids || item.parent_ids.length === 0;
        } else { // Filter items having parent IDs in the provided array
            return item.parent_ids?.some((parent: any) => parentId.includes(parent));
        }
    });

    // Map filtered items and recursively nest children
    // If top-level item, children will be [] as the recursive call will no longer have a length of 0 for parentId
    const map = filtered.map((item: any) => ({
        ...item,
        children: nest(items, [item.id, ...parentId]) // Recursive call to nest children
    }));

    return map; // Return the nested structure
};